#include "shell.h"

/**
 *prompt - prints prompt 
 *returns = void
*/

void prompt(info_t *info)
{
  char buf[1024];
  int interactive = info->interactive;

  if (interactive = isatty(fileno(stdin)))
        if (getcwd(buf, sizeof(buf)) != NULL)
        {
            write(STDOUT_FILENO, buf, strlen(buf));
	    write(STDOUT_FILENO, "\n$ ", 3);
        }
        else
        {
            perror("Error: cwd error");
        }
	
}



/**
 *read_line - prints prompt and reads line 
 *return - void
 */


void read_line(&info)
{
      /* Function for reading input from user */
  info->getline_bytes = getline_bytes;
  getline_bytes = getline(&buffer, &n, stdin);
  if (getline_bytes == -1)
    {
      free(buffer); /*Free dynamically allocated buffer*/
      exit(0);
    }
  if (getline_bytes == 1 && buffer[0] == '\n')
    {
      free(buffer); /*Free dynamically allocated buffer*/
      return;
    }
  
  buffer_copy = strdup(buffer);
  
  hashtags(buffer_copy);
  
  /* Tokenize string */
  sstring = strtok(buffer, " \n");
  
  if (sstring)
    {
      /* Keep adding up to keep track of the number of tokens needed */
      ntokens++;
      sstring = strtok(NULL, " \n");
    }
  ntokens++;
  
  string_arr = malloc(sizeof(char *) * (ntokens + 1));
  
  token = strtok(buffer_copy, " \n");
  for (i = 0; token != NULL; i++)
    {
      string_arr[i] = strdup(token);
      token = strtok(NULL, " \n");
    }
  string_arr[i] = NULL;
  
  executable(string_arr);
  
  for (i = 0; string_arr[i] != NULL; i++)
    {
      free(string_arr[i]);
    }
  free(string_arr);
  free(buffer_copy);
  free(buffer);
}
